import unittest
from unittest import TestCase
import game
from unittest.mock import patch
import unittest.mock
import io


class TestMakeMap(TestCase):
    def test_make_two_by_two_map(self):
        test_rows = 4  # in order to make a 5x5 make we need to set the rows and columns to 7, since 2 of the rows and columns are used for walls and ceilings.
        test_columns = 4
        actual = game.make_map(test_rows, test_columns)
        expected = [['  |  ', '_____', '_____', '  |  '], ['  |  ', '|___|', '|___|', '  |  '], ['  |  ', '|___|', '|___|', '  |  '], ['  |  ', '_____', '_____', '  |  ']]

        self.assertEqual(actual, expected)

    def test_make_two_by_two_map_look(self):
        test_rows = 4  # in order to make a 5x5 make we need to set the rows and columns to 7, since 2 of the rows and columns are used for walls and ceilings.
        test_columns = 4
        five_by_five_map = game.make_map(test_rows, test_columns)
        actual = ('\n'.join(map(''.join, five_by_five_map)))
        expected = """  |  __________  |  
  |  |___||___|  |  
  |  |___||___|  |  
  |  __________  |  """
        self.assertEqual(actual, expected)

    def test_make_25_by_25_map(self):
        test_rows = 27  # in order to make a 25x25 grid, make we need to set the rows and columns to 27, since 2 of the rows and columns are used for walls and ceilings.
        test_columns = 27
        actual = game.make_map(test_rows, test_columns)
        expected = [
            ['  |  ', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____',
             '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____',
             '_____', '_____', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|', '|___|',
             '|___|', '|___|', '  |  '],
            ['  |  ', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____',
             '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____', '_____',
             '_____', '_____', '  |  ']]
        self.assertEqual(actual, expected)

    def test_make_25_by_25_map_look(self):
        test_rows = 27  # in order to make a 5x5 make we need to set the rows and columns to 7, since 2 of the rows and columns are used for walls and ceilings.
        test_columns = 27
        five_by_five_map = game.make_map(test_rows, test_columns)
        actual = ('\n'.join(map(''.join, five_by_five_map)))
        expected = """  |  _____________________________________________________________________________________________________________________________  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  |___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___||___|  |  
  |  _____________________________________________________________________________________________________________________________  |  """
        self.assertEqual(actual, expected)


if __name__ == '__main__':
    unittest.main()
